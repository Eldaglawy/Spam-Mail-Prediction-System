# -*- coding: utf-8 -*-
"""Spam_Mail_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O9b8o5hHqgfGeCpwnDo-Vu_Atgprb2Ho
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split          #Splitting Data to Training Data and Testing Data
from sklearn.feature_extraction.text import TfidfVectorizer   #Testing Data to Numerical Values
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection & Pre-Processing"""

raw_mail_data = pd.read_csv ('/content/mail_data.csv')

print (raw_mail_data)

# replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# checking the number of rows and columns in the dataframe
mail_data.shape

# label spam mail as 0;  ham mail as 1;

mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1



"""spam  -  0

ham  -  1
"""

# separating the data as texts and label

X = mail_data['Message']

Y = mail_data['Category']

print (X)

print (Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""Feature Extraction"""

# transform the text data to feature vectors that can be used as input to the Logistic regression

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train_features)

"""Training the Model with Logistic Regression"""

model = LogisticRegression()

# training the Logistic Regression model with the training data
model.fit(X_train_features, Y_train)

# prediction on training data

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print('Accuracy on training data : ', accuracy_on_training_data)

# prediction on test data

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)

print('Accuracy on test data : ', accuracy_on_test_data)

"""There's no overfitting

Building a Predictive System
"""

input_mail = ["Phony Â£350 award - Todays Voda numbers ending XXXX are selected to receive a Â£350 award. If you have a match please call 08712300220 quoting claim code 3100 standard rates app"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')